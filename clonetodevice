#!/bin/bash
#Caution, do not run unless you already have a backup you trust.
#I've ran this on my machine enough that I trust it.
#You should not trust any new backup plan until you've not only
#used it to backup, but also to restore.
#Just because this works for me, that doesn't mean it will work for you.
#Use at your own risk, I'm just any amateur.
#That said, it's served me well. :)


if [ "$(id -u)" != "0" ]; then
  exec sudo "$0" "$@"
fi

user="$SUDO_USER"
hostname=$(hostname)

while [ "$response" != "y" ]; do
    read -p "Enter the device to clone to [/dev/sdx]: " device
    device=${device:-/dev/sdx}
    read -p "Is $device correct [y/N]? " response
    response=${response:-N}
    response="${response:0:1}"
    response="${response,,}"
done
 
slashmountedonpartition=$(mount | grep " / " | awk '{print $1}')

#####################################
if [[ $slashmountedonpartition == *"nvme"* ]]; then
    sourcedevice=${slashmountedonpartition::-2}
else
    sourcedevice=${slashmountedonpartition::-1}
fi
echo "sourcedevice is $sourcedevice"
#####################################


numpartitions=$(lsblk -nlpo NAME,TYPE $sourcedevice | awk '$2=="part"{print $1}' | wc -l)

echo "Okay, found $numpartitions partitions on source drive ($sourcedevice)"

if [ $numpartitions != 2 ]; then
    echo "Sorry, this script only works with 2 specific partitions"
    echo  "Partition #1 must be exactly \"EFI System\""
    echo "Partition #2 must be exactly \"Linux filesystem\""
    exit 1
fi

part1type=$(lsblk -o name,parttypename | grep sda1 | awk -F 'sda1' '{print $2}' | sed 's/^[[:space:]]*//')
echo "part1type is $part1type"

part2type=$(lsblk -o name,parttypename | grep sda2 | awk -F 'sda2' '{print $2}' | sed 's/^[[:space:]]*//')
echo "part2type is $part2type"

if [[ $part1type != "EFI System"  || $part2type != "Linux filesystem" ]]; then
    echo "Sorry, partitions are wrong type"
    echo "Partition #1 must be exactly \"EFI System\""
    echo "Partition #2 must be exactly \"Linux filesystem\""
    exit 2
fi

echo "Okay, $sourcedevice will be cloned to $device ..."

label="target"

echo "Does $device need formatted?"
echo "Probably [n]ot if you're updating a previous working clone"
echo "otherwise [y]es to partition the device. (512MiB Fat32 EFI and remaining space EXT4)"
read -p "Does $device need formatted? [y/N]: " formatRequested
formatRequested=${formatRequested:-N}
formatRequested="${formatRequested:0:1}"
formatRequested="${formatRequested,,}"

if [[ $device == *"nvme"* ]]; then
    efipartition="$device"p1
    mainpartition="$device"p2
else
    efipartition="$device"1
    mainpartition="$device"2
fi

if [ $formatRequested = "y" ]; then
possiblelabel="$(hostname)usb"
read -p "Enter a new label for the target device (e.g. [$possiblelabel]): " label
label=${label:-$possiblelabel}
echo "Label of target device will be: $label"
echo "formating $device...";

fdisk $device <<EOF
g
n
1

+512M
t
C12A7328-F81F-11D2-BA4B-00A0C93EC93B
n
2


w
EOF

echo "efi and ext4 partitions created successfully."

mkfs.fat -F32 -n EFI "$efipartition"
yes | mkfs.ext4 -L "$label" "$mainpartition"
fi

mount /boot/efi

mkdir /media/$user/EFI

mount "$efipartition" /media/$user/EFI

mkdir /media/$user/$label

mount "$mainpartition" /media/$user/$label


if    [ $(mount | grep -c "/media/$user/$label ") -gt 0 ] & [ $(mount | grep -c /media/$user/EFI) -gt 0 ] & [ $(mount | grep -c /boot/efi) -gt 0 ]
then
      sourceuuid=$(findmnt / -o UUID -n)
      targetuuid=$(findmnt /media/$user/"$label" -o UUID -n)

      sourceefiuuid=$(grep /boot/efi /etc/fstab | awk '{print $1}' | grep UUID | sed -E 's/UUID=(.*)/\1/' )
      targetefiuuid=$(findmnt /media/$user/EFI/ -o UUID -n)

      rsync -rv --delete /boot/efi/ /media/$user/EFI/
      sed -i "s/$sourceuuid/$targetuuid/" /media/$user/EFI/EFI/ubuntu/grub.cfg
      rsync -axAXHv --exclude='/dev/*' --exclude='/proc/*' --exclude='/sys/*' --exclude='/tmp/*' --exclude='/run/*' --exclude='/mnt/*' --exclude='/media/*' --exclude='/lost+found/' --delete  / /media/$user/"$label"/

      sed -i "s/$sourceuuid/$targetuuid/" /media/$user/$label/etc/fstab
      sed -i "s/$sourceuuid/$targetuuid/" /media/$user/$label/boot/grub/grub.cfg
      sed -i "s/$sourceefiuuid/$targetefiuuid/" /media/$user/$label/etc/fstab
else
      echo "Either $label or the EFI partition on the target is not mounted"
      echo '(Target efi partition MUST be labeled exactly "EFI")'
fi

echo "Writing changes to target, do not remove!"

sync

umount "$efipartition"
umount "$mainpartition"

rm -rf /media/$user/EFI
rm -rf /media/$user/$label

echo "It is now okay to remove the target drive."
